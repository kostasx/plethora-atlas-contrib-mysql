// Generated by CoffeeScript 1.12.4
var colors, db, mysql;

mysql = require('mysql');

colors = require('colors');

db = {
  init: function(options) {
    db.host = options.host;
    db.user = options.user;
    return db.password = options.password;
  },
  connect: function() {
    return mysql.createConnection({
      host: db.host,
      user: db.user,
      password: db.password
    });
  },
  databaseExists: function(options) {
    return new Promise(function(resolve, reject) {
      var connection;
      connection = db.connect();
      connection.query("USE " + options.dbname, function(err, rows, fields) {
        if (err) {
          return resolve({
            msg: "Database " + options.dbname + " does not exist",
            exists: false
          });
        } else {
          return reject({
            msg: "Warning: Database " + options.dbname + " exists. Remove before continuing.\n",
            exists: true
          });
        }
      });
      return connection.end();
    });
  },
  createDatabase: function(options) {
    return new Promise(function(resolve, reject) {
      var connection;
      connection = db.connect();
      connection.query('create database `' + options.dbname + '`', function(err, rows, fields) {
        if (err) {
          console.log(("Error: createDatabase - " + err).red);
          return reject({
            msg: "createDatabase - Error",
            error: err,
            dname: options.dbname
          });
        } else {
          Helpers.notify({
            msg: 'Database created succesfully!'
          });
          return resolve({
            msg: "Database created succesfully!",
            dbname: options.dbname
          });
        }
      });
      return connection.end();
    });
  },
  execQuery: function(options) {
    return new Promise(function(resolve, reject) {
      var connection;
      connection = db.connect();
      connection.query(options.query, function(err, rows, fields) {
        if (err) {
          return resolve({
            msg: "Error executing query: " + options.query
          });
        } else {
          return resolve({
            msg: "Query " + options.query + " executed succesfully!",
            rows: rows,
            fields: fields
          });
        }
      });
      return connection.end();
    });
  },
  dropDatabase: function(options) {
    return new Promise(function(resolve, reject) {
      var connection;
      connection = db.connect();
      connection.query('drop database `' + options.dbname + '`', function(err, rows, fields) {
        if (err) {
          console.log(("Error: dropDatabase - " + err).red);
          return resolve({
            msg: "dropDatabase - Error",
            error: err
          });
        } else {
          return resolve({
            msg: "Database " + options.dbname + " was removed."
          });
        }
      });
      return connection.end();
    });
  },
  getDatabases: function(options) {
    var databases;
    databases = [];
    return new Promise(function(resolve, reject) {
      var connection;
      connection = db.connect();
      connection.query('show databases', function(err, rows, fields) {
        if (err) {
          return reject({
            msg: "Error",
            error: err
          });
        }
        rows.forEach(function(db) {
          if (db.Database !== 'mysql' && db.Database !== 'information_schema' && db.Database !== 'performance_schema') {
            return databases.push(db.Database);
          }
        });
        return resolve({
          msg: "",
          databases: databases
        });
      });
      return connection.end();
    });
  },
  sanitizeDBNameSync: function(dbname) {
    return dbname.replace(/\./g, "_").replace(/-/g, "_").replace(/ /g, "_").replace(/\//g, "");
  },
  mySqlDump: function(options) {
    return new Promise(function(resolve, reject) {
      var cmd, dbname, exec, mysqldump, sqlpass, sqluser;
      exec = require('child_process').exec;
      mysqldump = options.mysqldump_bin;
      sqluser = options.user;
      sqlpass = options.password;
      dbname = options.dbname;
      cmd = mysqldump + ' -u' + sqluser + ' -p' + sqlpass + ' ' + dbname;
      if (options.write) {
        cmd = cmd + " > " + dbname + ".sql";
      }
      return db.databaseExists({
        dbname: dbname,
        host: db.host,
        user: db.user,
        password: db.password
      }).then(function(res) {
        return reject(("ERROR: Database " + dbname + " does not exist").red);
      })["catch"](function(e) {
        var child;
        child = exec(cmd, function(err, stdout, stderr) {
          if (err !== null) {
            console.log(stderr.red, err);
            return reject(("ERROR: Problem exporting " + dbname + " database.").red);
          } else {

          }
        });
        console.log(stdout);
        return resolve(dbname + " dumped successfully.");
      });
    });
  }
};

module.exports = db;
